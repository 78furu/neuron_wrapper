/* 
* Loads model files and creates GUI panels. Includes procedure for generating shape plots of cells
* AUTHOR: Aman Aberra, Duke University
* CONTACT: aman.aberra@duke.edu
*/

{load_file("nrngui.hoc")}
{load_file("interpCoordinates.hoc")}
{load_file("setPointers.hoc")}
{load_file("calcVe.hoc")}
{load_file("stimWaveform.hoc")}
{load_file("cellChooser.hoc")}
{load_file("setParams.hoc")}
{load_file("editMorphology.hoc")} // procs for editing cell morphology
{load_file("rig.ses")}

{load_file("params.hoc")} // my parameters

createPanels() // in setParams.hoc

objref soma_point3
// color_plotmax(plot_mode,save_fig)
// plot_mode: 1 colors nodes of Ranvier, Myelin, and Unmyelinated axon separately (default)
//            2 colors main axon in red, rest of axon black
// save_fig: 1 saves figure "cell<cell_id>.eps", 0 just plots (default)
proc color_plotmax() { local plot_mode,save_fig
	if (numarg() > 0){
        plot_mode = $1
    } else {
        plot_mode = 1 // default mode 1 
    }   
    if (numarg() > 1){
        save_fig = $2
    } else {
        save_fig = 0 // default don't save
    }
	load_file(0,"anatscale.hoc")
    anatscale(400,0,0,250)  // origin xyz and length	
    shplot = new Shape(0)
	shplot.view(-1568.93, -1200, 2837.86, 1700, 607, 93, 530, 320)
	shplot.color_list(cell.axonal,1)
    if (plot_mode == 1) {
        if (myelinate_ax) {
            shplot.color_list(iseg_secList,5)
            shplot.color_list(Node_secList,2)
            shplot.color_list(Myelin_secList,1)
            shplot.color_list(Unmyelin_secList,5) 
        }                      
    } else if (plot_mode == 2) {
        shplot.color_list(main_ax_list,2)	 
    }
	shplot.color_list(cell.apical,3)
	shplot.color_list(cell.basal,4)
	cell.soma soma_point3 = new IClamp(0.5)
	shplot.point_mark(soma_point3,1,"O",10)	        
    shplot.exec_menu("View = plot")    
	if (save_fig) {
		strdef cellfile
		sprint(cellfile,"Cell%g.eps",cell_id)		
		shplot.printfile(cellfile)
	}		
}
calcesE(theta, phi)
cell_chooser(cell_id) // cell_id in params.hoc, cell_chooser in cellChoose.hoc
setstim(DEL, DUR, AMP)
calcesE(theta, phi)

/*
proc run() {

    stdinit()
    finitialize()
    while (t<tstop) {
        //fadvance()
        calcesE(theta,phi) 
        steprun()
        //flushPlot() 
        //screen_update() 
    }
}*/

proc run() {
    stdinit()
    //finitialize()
    section_counter = 0
    theta_old = theta
    phi_old = phi

    while (t<tstop) {
        //fadvance()
        steprun()
        theta = theta_old
        phi = phi_old
        if (section_counter != thetas.size()){
            section_time_min = section_time.x[section_counter]
            section_time_max = section_time.x[section_counter + 1]
            if ((t>section_time_min) && (t<section_time_max)){
            theta = thetas.x[section_counter]
            phi = phis.x[section_counter]

            } else if ((t>section_time_max-(dt/2)) && (t<section_time_max + (dt/2))){
                section_counter +=1 
            }
        }

        calcesE(theta,phi)         
        printf("\tSimulation time: %f [ms] out of %f [ms], %f, %f, %f, %f \r",t, tstop, theta, phi, section_time_min,  section_counter  )

        //flushPlot() 
        //screen_update() 
    }
}


/*
objref rect, recv, recproba1, recproba2, recproba3

rect = new Vector()
recv = new Vector()
recproba1 = new Vector()
recproba2 = new Vector()
recproba3 = new Vector()

rect.record(&t)
recv.record(&cell.soma.v(0.5))
recproba1.record(&cell.soma.ica(0.5))
recproba2.record(&cell.soma.ik(0.5))
recproba3.record(&cell.soma.ina(0.5))
*/

{load_file("record_params.hoc")}





/*
objref savdata
savdata = new File()
savdata.wopen(fname_to_save)

// savdata.printf("t SThcells[2].soma.v(0.5)\n")
// savdata.printf("%d\n",rect.size())

for i=0,rect.size()-1 {
    savdata.printf("%g %g %g %g %g\n", rect.x(i), recv.x(i), recproba1.x(i), recproba2.x(i), recproba3.x(i))
}

savdata.close()/*